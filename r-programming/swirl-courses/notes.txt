Swirl - R Programming
--------------------------------
skip(): skip the current question
play(): experiment with R on your own; swirl will ignore what you do...
nxt():  regain swirl's attention
bye():  cause swirl to exit
main(): return to swirl's main menu
info(): displays these options again
help.start(): more information on a particular topic related to R

lesson 1 - Basic Building Blocks
---------------------------------
<-: assign
c():  (concatenate) create a vector
?c: learn more about function c
^:  power
sqrt(): square root
abs():  absolute value

c(1, 2, 3, 4) * 2 + 100 = c(102, 104, 106, 108)
c(1, 2, 3, 4) + c(1, 10) = c(2, 12, 4, 14)
c(1, 2, 3, 4) + c(1, 10, 100) = c(2, 12, 103, 4) and a warning

lesson 2 - Workspace and Files
---------------------------------
getwd():  get current working directory
setwd("dir"): set working directory
ls(): list all the objects in workspace
list.files(): same as ls()
dir():  list all the files in working directory
args(function name):  determine the arguments of this function
dir.create("dir"):  create a directory
file.create("file"):  create a file
file.exists("file"):  check if file exists in the working directory
file.info("file"):  access information about the file
file.info("file")$mode: to grab specific items.
file.rename("filename1", "filename2"):  rename a file
file.remove("file"): remove a file
file.copy("filename1", "filename2"):  copy a file
file.path("file"): show path to the file
dir.create("dir1/dir2", recursive = TRUE):  create a directory dir1 and a secondary directory dir2
unlink("dir", recursive = TRUE): remove a directory that contains other directories

lesson 3 - Sequences of Numbers
----------------------------------
> 1:20
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> pi:10
 [1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593
> 15:1
 [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1
?`:` - pull up the documentation for ":".

seq(): seq(1, 20) is equivalent to 1:20
> seq(0, 10, by=0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0  8.5  9.0  9.5 10.0
> my_seq <- seq(5, 10, length=30)
> seq(along.with = my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
seq_along(): build-in function for doing the job above
> seq_along(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

rep()
> rep(0, times = 40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
> rep(c(0, 1, 2), times = 10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2
> rep(c(0, 1, 2), each = 10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2

lesson 4 - Vectors
----------------------------------
vectors:
    - atomic vectors (contains one data type: numeric, logical, character, integer, and complex)
    - lists (contain multiple data types)

logical vectors: TRUE, FALSE, NA(not available)
logical operators: `>`, `<=`, `==`, `!=`
At least one is TRUE: A | B
Both are TRUE: A & B

paste():
    > my_char
    [1] "My"   "name" "is"
    > paste(my_char, collapse = " ")
    [1] "My name is"
    > c(my_char, "Qingxiao")
    [1] "My"       "name"     "is"       "Qingxiao"
    > paste("Hello", "world!", sep = " ")
    [1] "Hello world!"
    > paste(1:3, c("X", "Y", "Z"), sep = "")
    [1] "1X" "2Y" "3Z"
    > paste(1:3, c("X", "Y", "Z"), sep = "", collapse = " ")
    [1] "1X 2Y 3Z"
    > paste(LETTERS, 1:4, sep = "-")
     [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3" "L-4" "M-1" "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3"
    [20] "T-4" "U-1" "V-2" "W-3" "X-4" "Y-1" "Z-2"

lesson 5 - Missing Values
----------------------------------
rnorm(): rnorm(1000) containing 1000 draws from a standard normal distribution
sample():
    sample(c(1:100), 10) selects 10 elements random from a vector
    sample(10):  [1]  8 10  2  1  3  5  9  4  6  7 (random sampling of integers from 1 to 10 without replacement)
is.na(): tells whether each element of a vector is NA.
sum(is.na(vector)): sums up all the TRUES(which is 1) and ignores FALSEs(NAs, which is 0)
NaN: not a number
Inf: infinity

lesson 6 - Subsetting Vectors
----------------------------------
vector[1:10]: returns the first ten elements of a vector
vector[!is.na(vector)]: returns a vector that contains all of the non-NA values from a vector
vector[vector > 0]: returns a vector of all the positive elements of the vector
vector[c(3, 5, 7)]: returns the 3rd, 5th and 7th elements of the vector
vector[c(-2, -10)]: returns all elements of the vector EXCEPT for the 2nd and 10th elements
vector[-c(2, 10)]: same as above

named elements:
> vect <- c(foo = 11, bar = 2, norf = NA)
> vect
 foo  bar norf
  11    2   NA
> vect["bar"]
bar
  2
> vect[c("foo", "bar")]
foo bar
 11   2

names(): get the names of a vector
    > names(vect)
    [1] "foo"  "bar"  "norf"
    > vect2 <- c(11, 2, NA)
    > names(vect2) <- c("foo", "bar", "norf")
identical(): will return TRUE if the two R objects passed to it as arguments are identical
    > identical(vect, vect2)
    [1] TRUE

lesson 7 - Matrices and Data Frames
----------------------------------
Matrices: can only contain a single class of data
Data frames: can consist of many different classes of data

dim(): tells the 'dimensions' of an object
    > my_vector
     [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
    > dim(my_vector)
    NULL
    > dim(my_vector) <- c(4, 5)
    > dim(my_vector)
    [1] 4 5
    > my_vector
         [,1] [,2] [,3] [,4] [,5]
    [1,]    1    5    9   13   17
    [2,]    2    6   10   14   18
    [3,]    3    7   11   15   19
    [4,]    4    8   12   16   20
attributes()
    > attributes(my_vector)
    $dim
    [1] 4 5
class(obj): returns the class type of the object
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL): create a matrix
cbind(): combine columns
data.frame(): takes any number of arguments and returns a single object of class `data.frame` that is composed of the original objects
colnames(): set the column names attributes for a data frame (similar to dim())

lesson 8 - Logic
----------------------------------
`&`/`|` operator is used to evaluate AND/OR across a vector.
`&&`/`||` version of AND/OR only evaluates the first member of a vector.
    > TRUE & c(TRUE, FALSE, FALSE)
    [1]  TRUE FALSE FALSE
    > TRUE && c(TRUE, FALSE, FALSE)
    [1] TRUE

All AND operators are evaluated before OR operators.
    > 5 > 8 || 6 != 8 && 4 > 3.9
    [1] TRUE

isTRUE(): takes one argument. If that argument evaluates to TRUE, the function will return TRUE. Otherwise, the function will return FALSE.
xor(): If one argument evaluates to TRUE and one argument evaluates to FALSE, then this function will return TRUE, otherwise it will return FALSE.
which(): takes a logical vector as an argument and returns the indices of the vector that are TRUE
any(): take logical vectors as their argument and return TRUE if one or more of the elements in the logical vector is TRU
all(): take logical vectors as their argument and return TRUE if every element in the logical vector is TRUE

lesson 9 - lapply and sapply
----------------------------------
head(): preview the first six lines of the dataset
as.list(data.frame): show data frame as a list of vectors
lapply(): takes a list as input, applies a function to each element of the list, then returns a list of the same length as the original one
    'l' stands for "list", so it returns a list
as.character(): can change list to vector
sapply(): automates this process by calling lapply() behind the scenes
    - if the result is a list where every element is of length one, then sapply() returns a vector
    - if the result is a list where every element is a vector of the same length (> 1), sapply() returns a matrix
    - If sapply() can't figure things out, then it just returns a list just as lapply does
sum(matrix$colname): sums up the values in the column of the matrix

matrix[, 11:17]: all rows, but only columns 11 through 17

range(): returns the minimum and maximum of its first argument (a numeric vector)
unique(): returns a vector with all duplicate elements removed

anonymous functions:
lapply(unique_vals, function(elem) elem[2]): return a list containing the second item from each element of the unique_vals list
The function has no name and disappears as soon as lapply() is done using it.

lesson 10 - vapply and tapply
----------------------------------
str(): compactly display the structure of an arbitrary R object
summary(): object summaries
vapply(): allows to specify the format of the result explicitly
table(): to show how many values fall has the same value
tapply(): to split data up into groups based on the value of some variable, then apply a function to the members of each group

lesson 11 - Looking at Data
----------------------------------
class()
dim()
nrow()
ncol()
object.size(): show how much space the dataset is occupying in memory
names(): return a character vector of column names
head(): default is 6 rows, head(object, 10) -> 10 rows
tail(): same as above, view last 6(default) rows
summary(): how each variable is distributed and how much of the dataset is missing
table()
str(): structure

lesson 12 - Simulation
----------------------------------
sample(): generate random numbers
    > sample(1:6, 4, replace = TRUE)
    [1] 1 4 3 6
    > flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
LETTERS: a predefined variable in R containing a vector of all 26 letters of the English alphabet
    > sample(LETTERS)
     [1] "F" "S" "L" "D" "B" "V" "A" "U" "H" "M" "J" "E" "N" "X" "K" "T" "Q" "Y" "P"
    [20] "W" "O" "I" "G" "R" "Z" "C"
rbinom(): binomial random variable
    > rbinom(1, size = 100, prob = 0.7)
    [1] 70
    > rbinom(100, size = 1, prob = 0.7)
     [1] 0 1 0 1 1 1 1 0 0 0 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 0 0
    [40] 0 1 1 0 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 0 1 0 0 1 1 1 1 1 0 1 1 1 0
    [79] 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0
rnorm(): The standard normal distribution has mean 0 and standard deviation 1
    > rnorm(10)
     [1]  0.4156254  0.3358619 -0.7711440 -1.1073701 -0.9143807  1.4558764  0.2515096
     [8]  0.5741982 -0.3514410  0.1756151
    > rnorm(10, mean = 100, sd = 25)
     [1] 109.55673 100.22195 101.21602 118.09161 113.83964  89.05337  65.54844
     [8]  83.89043  92.56555  61.52769
rpois(): Poisson distribution
replicate(): creates a matrix, replicate(100, rpois(5, 10)) each column contains 5 random numbers
            generated from a Poisson distribution with mean 10.
colMeans(): find the mean of each column
hist(): plots a histogram
rexp(): exponential distribution
rchisq(): chi-squared distribution
rgamma(): gamma distribution

Each probability distribution in R has
    - r*** function (for "random")
    - d*** function (for "density")
    - p*** (for "probability")
    - q*** (for "quantile").

lesson 13 - Dates and Times
----------------------------------
Dates are represented by the 'Date' class
    Stored as the number of days since 1970-01-01
Times are represented by the 'POSIXct' and 'POSIXlt'
    Stored as either the number of seconds since 1970-01-01(for 'POSIXct')
    or a list of seconds, minutes, hours, etc. (for 'POSIXlt')

Sys.Date(): get the current date
unclass(): see what an object looks internally
as.Date("1969-01-01"): create a Date object
Sys.time(): [1] "2015-01-22 12:54:40 EST" (POSIXct)
as.POSIXlt(Sys.time()): POSIXlt
weekdays(): return the day of week from any date or time
months(): same as above
quarters(t2): same as above
strptime(): converts character vectors to POSIXlt. Similar to as.POSIXlt(), except that the input
            doesn't have to be in a particular format(YYYY-MM-DD)
    > t3 <- "October 17, 1986 08:24"
    > strptime(t3, "%B %d, %Y %H:%M")
    [1] "1986-10-17 08:24:00 EDT"

arithmetic operations (+ and -) and comparisons (<, ==, etc.) could be used
difftime(): like '-', but it allows to specify a 'units' parameter
    > difftime(Sys.time(), t1, units = 'days')
    Time difference of 0.01647176 days

lesson 14 - Base Graphics
----------------------------------
data(): load an included data frame
plot(): plots a graph
    > plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
    > plot(cars, col = 2) plots cars with red color
    ?points - change the shape of the symbols in the plot
boxplot():
    > boxplot(formula = mpg ~ cyl, data = mtcars)
hist(): When looking at a single variable, histograms are a useful tool
