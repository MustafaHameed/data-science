Swirl - R Programming
--------------------------------
skip(): skip the current question
play(): experiment with R on your own; swirl will ignore what you do...
nxt():  regain swirl's attention
bye():  cause swirl to exit
main(): return to swirl's main menu
info(): displays these options again
help.start(): more information on a particular topic related to R

lesson 1 - Basic Building Blocks
---------------------------------
<-: assign
c():  (concatenate) create a vector
?c: learn more about function c
^:  power
sqrt(): square root
abs():  absolute value

c(1, 2, 3, 4) * 2 + 100 = c(102, 104, 106, 108)
c(1, 2, 3, 4) + c(1, 10) = c(2, 12, 4, 14)
c(1, 2, 3, 4) + c(1, 10, 100) = c(2, 12, 103, 4) and a warning

lesson 2 - Workspace and Files
---------------------------------
getwd():  get current working directory
setwd("dir"): set working directory
ls(): list all the objects in workspace
list.files(): same as ls()
dir():  list all the files in working directory
args(function name):  determine the arguments of this function
dir.create("dir"):  create a directory
file.create("file"):  create a file
file.exists("file"):  check if file exists in the working directory
file.info("file"):  access information about the file
file.info("file")$mode: to grab specific items.
file.rename("filename1", "filename2"):  rename a file
file.remove("file"): remove a file
file.copy("filename1", "filename2"):  copy a file
file.path("file"): show path to the file
dir.create("dir1/dir2", recursive = TRUE):  create a directory dir1 and a secondary directory dir2
unlink("dir", recursive = TRUE): remove a directory that contains other directories

lesson 3 - Sequences of Numbers
----------------------------------
> 1:20
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> pi:10
 [1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593
> 15:1
 [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1
?`:` - pull up the documentation for ":".

seq(): seq(1, 20) is equivalent to 1:20
> seq(0, 10, by=0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0  8.5  9.0  9.5 10.0
> my_seq <- seq(5, 10, length=30)
> seq(along.with = my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
seq_along(): build-in function for doing the job above
> seq_along(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30

rep()
> rep(0, times = 40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
> rep(c(0, 1, 2), times = 10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2
> rep(c(0, 1, 2), each = 10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2

lesson 4 - Vectors
----------------------------------
vectors:
    - atomic vectors (contains one data type: numeric, logical, character, integer, and complex)
    - lists (contain multiple data types)

logical vectors: TRUE, FALSE, NA(not available)
logical operators: `>`, `<=`, `==`, `!=`
At least one is TRUE: A | B
Both are TRUE: A & B

paste():
> my_char
[1] "My"   "name" "is"
> paste(my_char, collapse = " ")
[1] "My name is"
> c(my_char, "Qingxiao")
[1] "My"       "name"     "is"       "Qingxiao"
> paste("Hello", "world!", sep = " ")
[1] "Hello world!"
> paste(1:3, c("X", "Y", "Z"), sep = "")
[1] "1X" "2Y" "3Z"
> paste(1:3, c("X", "Y", "Z"), sep = "", collapse = " ")
[1] "1X 2Y 3Z"
> paste(LETTERS, 1:4, sep = "-")
 [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3" "L-4" "M-1" "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3"
[20] "T-4" "U-1" "V-2" "W-3" "X-4" "Y-1" "Z-2"

lesson 5 - Missing Values
----------------------------------
rnorm(): rnorm(1000) containing 1000 draws from a standard normal distribution
sample(): sample(c(1:100), 10) selects 10 elements random from a vector
is.na(): tells whether each element of a vector is NA.
sum(is.na(vector)): sums up all the TRUES(which is 1) and ignores FALSEs(NAs, which is 0)
NaN: not a number
Inf: infinity

lesson 6 - Subsetting Vectors
----------------------------------
vector[1:10]: returns the first ten elements of a vector
vector[!is.na(vector)]: returns a vector that contains all of the non-NA values from a vector
vector[vector > 0]: returns a vector of all the positive elements of the vector
vector[c(3, 5, 7)]: returns the 3rd, 5th and 7th elements of the vector
vector[c(-2, -10)]: returns all elements of the vector EXCEPT for the 2nd and 10th elements
vector[-c(2, 10)]: same as above

named elements:
> vect <- c(foo = 11, bar = 2, norf = NA)
> vect
 foo  bar norf
  11    2   NA
> vect["bar"]
bar
  2
> vect[c("foo", "bar")]
foo bar
 11   2

names(): get the names of a vector
> names(vect)
[1] "foo"  "bar"  "norf"
> vect2 <- c(11, 2, NA)
> names(vect2) <- c("foo", "bar", "norf")

identical(): checks that if vectors are the same
> identical(vect, vect2)
[1] TRUE
