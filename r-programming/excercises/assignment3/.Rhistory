## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop('invalid state')
}
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## 30-day death rate
col <- if(outcome == "heart attack") {
11
} else if(outcome == "heart failure") {
17
} else {
23
}
filter1 <- data["State"] == state
fData <- data[filter1,]
fData[, col] <- as.numeric(fData[, col])
filter2 <- is.na(fData[, col])
fData2 <- fData[!filter2, ]
rank <- order(fData2[,col], decreasing = F)
sorted <- fData2[rank,]
sorted[as.numeric(num), 2]
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop('invalid state')
}
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## 30-day death rate
col <- if(outcome == "heart attack") {
11
} else if(outcome == "heart failure") {
17
} else {
23
}
filter1 <- data["State"] == state
fData <- data[filter1,]
fData[, col] <- as.numeric(fData[, col])
filter2 <- is.na(fData[, col])
fData2 <- fData[!filter2, ]
sorted <- fData2[order(fData2[,col]),]
sorted[as.numeric(num), 2]
}
rankhospital("TX", "heart failure", 4)
sorted <- fData2[order(fData2[,col]),]
sorted <- fData2[order(fData2[,11]),]
sorted[,11]
sorted[1,2]
[1,1]
sorted[1,11]
sorted[2,11]
sorted[2,2]
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop('invalid state')
}
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## 30-day death rate
col <- if(outcome == "heart attack") {
11
} else if(outcome == "heart failure") {
17
} else {
23
}
filter1 <- data["State"] == state
data1 <- data[filter1,]
data1[, col] <- as.numeric(data1[, col])
filter2 <- is.na(data1[, col])
data2 <- data1[!filter2, ]
sorted <- data2[order(data2[,col]),]
sorted[as.numeric(num), 2]
}
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 3)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop('invalid state')
}
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## 30-day death rate
col <- if(outcome == "heart attack") {
11
} else if(outcome == "heart failure") {
17
} else {
23
}
filter1 <- data["State"] == state
data1 <- data[filter1,]
data1[, col] <- as.numeric(data1[, col])
filter2 <- is.na(data1[, col])
data2 <- data1[!filter2, ]
sorted <- data2[order(data2[,col], data2[,2]),]
sorted[as.numeric(num), 2]
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop('invalid state')
}
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## 30-day death rate
col <- if(outcome == "heart attack") {
11
} else if(outcome == "heart failure") {
17
} else {
23
}
filter1 <- data["State"] == state
data1 <- data[filter1,]
data1[, col] <- as.numeric(data1[, col])
filter2 <- is.na(data1[, col])
data2 <- data1[!filter2, ]
sorted <- data2[order(data2[,col], data2[,2]),]
num <- if (num == "best") {
1
} else if (num == "worst") {
nrow(sorted)
}
sorted[as.numeric(num), 2]
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop('invalid state')
}
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## 30-day death rate
col <- if(outcome == "heart attack") {
11
} else if(outcome == "heart failure") {
17
} else {
23
}
filter1 <- data["State"] == state
data1 <- data[filter1,]
data1[, col] <- as.numeric(data1[, col])
filter2 <- is.na(data1[, col])
data2 <- data1[!filter2, ]
sorted <- data2[order(data2[,col], data2[,2]),]
num <- if (num == "best") {
"1"
} else if (num == "worst") {
as.character(nrow(sorted))
}
sorted[as.numeric(num), 2]
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop('invalid state')
}
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## 30-day death rate
col <- if(outcome == "heart attack") {
11
} else if(outcome == "heart failure") {
17
} else {
23
}
filter1 <- data["State"] == state
data1 <- data[filter1,]
data1[, col] <- as.numeric(data1[, col])
filter2 <- is.na(data1[, col])
data2 <- data1[!filter2, ]
sorted <- data2[order(data2[,col], data2[,2]),]
sorted[as.numeric(num), 2]
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop('invalid state')
}
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## 30-day death rate
col <- if(outcome == "heart attack") {
11
} else if(outcome == "heart failure") {
17
} else {
23
}
filter1 <- data["State"] == state
data1 <- data[filter1,]
data1[, col] <- as.numeric(data1[, col])
filter2 <- is.na(data1[, col])
data2 <- data1[!filter2, ]
sorted <- data2[order(data2[,col], data2[,2]),]
if (num == "best") {
sorted[1, 2]
} else if (num == "worst") {
sorted[nrow(sorted), 2]
} else {
sorted[as.numeric(num), 2]
}
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
nrow(sorted)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(!(state %in% data$State)) {
stop('invalid state')
}
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank
## 30-day death rate
col <- if(outcome == "heart attack") {
11
} else if(outcome == "heart failure") {
17
} else {
23
}
filter1 <- data["State"] == state
data1 <- data[filter1,]
data1[, col] <- as.numeric(data1[, col])
filter2 <- is.na(data1[, col])
data2 <- data1[!filter2, ]
sorted <- data2[order(data2[,col], data2[,2]),]
if (num == "best") {
sorted[1, 2]
} else if (num == "worst") {
sorted[nrow(sorted), 2]
} else {
sorted[as.numeric(num), 2]
}
}
#test
rankhospital("TX", "heart failure", 4)
#[1] "DETAR HOSPITAL NAVARRO"
rankhospital("MD", "heart attack", "worst")
#[1] "HARFORD MEMORIAL HOSPITAL"
rankhospital("MN", "heart attack", 5000)
#[1] NA
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
splitted <- split(data, data$State)
names(splitted)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
source("rankhospital.R")
splitted <- split(data, data$State)
states <- names(splitted)
hospitals <- lapply(states, rankhospital, outcome = outcome, num = num)
## Return a data frame with the hospital names and the
## (abrreviated state name)
cbind(hospitals, states)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
source("rankhospital.R")
splitted <- split(data, data$State)
states <- names(splitted)
hospitals <- character(0)
for (state in states) {
character <- c(character, rankhospital(state, outcome, num))
}
## Return a data frame with the hospital names and the
## (abrreviated state name)
cbind(hospitals, states)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
source("rankhospital.R")
splitted <- split(data, data$State)
states <- names(splitted)
hospitals <- character(0)
for (state in states) {
character <- c(character, rankhospital(state, outcome, num))
}
## Return a data frame with the hospital names and the
## (abrreviated state name)
data.frame(hospital=hospitals, state=states, rnames=states)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(outcome != "heart attack" && outcome != "heart failure"
&& outcome != "pneumonia") {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
source("rankhospital.R")
splitted <- split(data, data$State)
states <- names(splitted)
hospitals <- lapply(states, rankhospital, outcome=outcome, num=num)
## Return a data frame with the hospital names and the
## (abrreviated state name)
data.frame(hospital=hospitals, state=states, rnames=states)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(outcome == "heart attack") {
col <- 11
} else if(outcome == "heart failure") {
col <- 17
} else if (outcome == "pneumonia") {
col <- 23
} else {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
splitted <- split(data, data$State)
states <- names(splitted)
hospitals <- character(0)
for (data1 in splitted) {
data1[, col] <- as.numeric(data1[, col])
filter2 <- is.na(data1[, col])
data2 <- data1[!filter2, ]
sorted <- data2[order(data2[,col], data2[,2]),]
if (num == "best") {
hospitals <- c(hospitals, sorted[1, 2])
} else if (num == "worst") {
hospitals <- c(hospitals, sorted[nrow(sorted), 2])
} else {
hospitals <- c(hospitals, sorted[as.numeric(num), 2])
}
}
## Return a data frame with the hospital names and the
## (abrreviated state name)
data.frame(hospital=hospitals, state=states, rnames=states)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(outcome == "heart attack") {
col <- 11
} else if(outcome == "heart failure") {
col <- 17
} else if (outcome == "pneumonia") {
col <- 23
} else {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
splitted <- split(data, data$State)
states <- names(splitted)
hospitals <- character(0)
for (data1 in splitted) {
data1[, col] <- as.numeric(data1[, col])
filter2 <- is.na(data1[, col])
data2 <- data1[!filter2, ]
sorted <- data2[order(data2[,col], data2[,2]),]
if (num == "best") {
hospitals <- c(hospitals, sorted[1, 2])
} else if (num == "worst") {
hospitals <- c(hospitals, sorted[nrow(sorted), 2])
} else {
hospitals <- c(hospitals, sorted[as.numeric(num), 2])
}
}
## Return a data frame with the hospital names and the
## (abrreviated state name)
data.frame(hospital=hospitals, state=states, row.names=states)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
if(outcome == "heart attack") {
col <- 11
} else if(outcome == "heart failure") {
col <- 17
} else if (outcome == "pneumonia") {
col <- 23
} else {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
splitted <- split(data, data$State)
states <- names(splitted)
hospitals <- character(0)
for (data1 in splitted) {
data1[, col] <- as.numeric(data1[, col])
filter2 <- is.na(data1[, col])
data2 <- data1[!filter2, ]
sorted <- data2[order(data2[,col], data2[,2]),]
if (num == "best") {
hospitals <- c(hospitals, sorted[1, 2])
} else if (num == "worst") {
hospitals <- c(hospitals, sorted[nrow(sorted), 2])
} else {
hospitals <- c(hospitals, sorted[as.numeric(num), 2])
}
}
## Return a data frame with the hospital names and the
## (abrreviated state name)
data.frame(hospital=hospitals, state=states, row.names=states)
}
#test
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit(0)
submit(0)
submit(0)
